<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>blog搭建过程备忘</title>
    <url>/2021/11/27/hexo+github%E6%90%AD%E5%BB%BAblog/</url>
    <content><![CDATA[<p>本地环境配置参考了<a href="https://segmentfault.com/a/1190000017986794">blog</a></p>
<h2 id="本地环境配置"><a href="#本地环境配置" class="headerlink" title="本地环境配置"></a>本地环境配置</h2><h3 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h3><blockquote>
<p>Hexo 基于Node.js驱动</p>
</blockquote>
<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git version</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h3 id="Hexo安装及配置"><a href="#Hexo安装及配置" class="headerlink" title="Hexo安装及配置"></a>Hexo安装及配置</h3><p><code>npm install -g hexo-cli</code>  </p>
<h4 id="如果安装时发生代理错误：FetchError"><a href="#如果安装时发生代理错误：FetchError" class="headerlink" title="如果安装时发生代理错误：FetchError"></a>如果安装时发生代理错误：FetchError</h4><p>换源：<code>npm config set registry https://registry.npm.taobao.org</code><br>清除代理： <code>npm config set proxy null</code>; <code>npm config set https-proxy null</code></p>
<p>安装完成后，执行下列命令，在指定文件夹中新建文件；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init myblog</span><br><span class="line">cd myblog</span><br><span class="line">npm install </span><br></pre></td></tr></table></figure>
<p>生成的文件夹目录如下；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 </span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds # 模版文件夹</span><br><span class="line">├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span><br><span class="line">|   ├── _drafts # 草稿文件</span><br><span class="line">|   └── _posts # 文章Markdowm文件 </span><br><span class="line">└── themes  # 主题文件夹</span><br></pre></td></tr></table></figure>
<p>生成完成后，运行<code>hexo s</code>，在浏览器打开<a href="http://localhost:4000/">http://localhost:4000</a> 即可预览效果</p>
<h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><h3 id="更改-cong-yml-配置文件配置参数"><a href="#更改-cong-yml-配置文件配置参数" class="headerlink" title="更改_cong.yml 配置文件配置参数"></a>更改_cong.yml 配置文件配置参数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git </span><br><span class="line">    repo: </span><br><span class="line">        github: https://github.com/QQQ27/QQQ27.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>
<h3 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h3><p><code>npm install hexo-deployer-git --save</code></p>
<h3 id="部署上传"><a href="#部署上传" class="headerlink" title="部署上传"></a>部署上传</h3><p><code>hexo g -d</code><br>生成上传完成后，访问<a href="https://qqq27.github.io/">https://QQQ27.github.io</a> 即可看到搭建的博客主页。</p>
<h2 id="更改博客主题"><a href="#更改博客主题" class="headerlink" title="更改博客主题"></a>更改博客主题</h2><p>以next主题为例，克隆next项目到hexo根目录的theme/next文件中，修改hexo根目录的_config.yml配置文件中的theme为next即可。修改完成后，可以使用```hexo s –debug``命令验证。</p>
<h3 id="debug没有出错，但是博客页面无法正常显示？"><a href="#debug没有出错，但是博客页面无法正常显示？" class="headerlink" title="debug没有出错，但是博客页面无法正常显示？"></a>debug没有出错，但是博客页面无法正常显示？</h3><p>由于hexo在5.0版本后删除了swig，需要手动安装：<code>npm i hexo-render-swig</code>。</p>
<p><a href="http://theme-next.iissnan.com/">next 主页</a><br><a href="https://github.com/iissnan/hexo-theme-next">next github主页</a><br><a href="https://www.techgrow.cn/posts/755ff30d.html">参考blog</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>anaconda使用问题汇总</title>
    <url>/2021/11/29/anaconda%E5%A1%AB%E5%9D%91/</url>
    <content><![CDATA[<h3 id="conda-安装库时出现proxy问题"><a href="#conda-安装库时出现proxy问题" class="headerlink" title="conda 安装库时出现proxy问题"></a>conda 安装库时出现proxy问题</h3><h4 id="方法一：关闭本机网络代理"><a href="#方法一：关闭本机网络代理" class="headerlink" title="方法一：关闭本机网络代理"></a>方法一：关闭本机网络代理</h4><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>修改~目录下的<code>.condarc</code>文件，添加或者修改<code>proxy_server</code>参数，添加格式如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_servers:</span><br><span class="line">    http: http://127.0.0.1:8888</span><br><span class="line">    https: http://127.0.0.1:8888</span><br></pre></td></tr></table></figure>
<blockquote>
<p>! https: http 而不是https</p>
</blockquote>
<p>配置socks5代理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_servers:</span><br><span class="line">  http: socks5://127.0.0.1:1089</span><br><span class="line">  https: socks5://127.0.0.1:1089</span><br></pre></td></tr></table></figure>
<p>注意不要用<code>tab</code>键，而是使用四个空格，<code>https</code>和<code>http</code>后有一空格。代理ip地址为本机的<code>http</code>和<code>https</code>代理ip及端口，而不是远程服务器的ip和端口。</p>
<h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p><code>env  | grep -i &quot;_PROXY&quot;</code> 查看环境变量<br><code>unset http_proxy &amp;&amp; https_proxy &amp;&amp; HTTP_PROXY &amp;&amp; HTTPS_PROXY</code>  并且<code>export all_proxy=&quot;socks://127.0.01.:1088&quot; </code>，注释<code>.condarc</code>文件中的proxy_server设置,即可。<br>未关闭本机网络代理。</p>
<blockquote>
<p>不确定<code>unset...</code>和<code>export...</code>两个命令之间是否存在关联 </p>
</blockquote>
]]></content>
      <categories>
        <category>anaconda</category>
      </categories>
      <tags>
        <tag>anaconda</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>微软商店无法打开</title>
    <url>/2022/01/30/%E5%BE%AE%E8%BD%AF%E5%95%86%E5%BA%97%E7%BD%91%E7%BB%9C%E5%8E%9F%E5%9B%A0%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/</url>
    <content><![CDATA[<p>microsoft store网络原因无法打开<br>开始菜单–&gt;网络和Internet–&gt;代理–&gt;开启自动检测设置，不使用设置脚本</p>
]]></content>
      <categories>
        <category>网络代理</category>
      </categories>
      <tags>
        <tag>微软商店</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 迁移conda虚拟环境</title>
    <url>/2021/10/04/linux%20%E8%BF%81%E7%A7%BBanaconda%20%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<blockquote>
<p>两台计算机均为ubuntu系统，远程服务器无法使用http协议<br> 两台不同操作系统的环境迁移使用yaml文件</p>
</blockquote>
<h3 id="conda-clone"><a href="#conda-clone" class="headerlink" title="conda clone"></a>conda clone</h3><ul>
<li>本地计算机，直接clone本地文件夹 /anaconda3/pkgs 和/anaconda3/envs/my_env至远程服务器的相应文件夹；</li>
<li>远程服务器上，<code>conda create -n my_env --clone  my_env_path --offline</code> 发生HTTPERROR</li>
</ul>
<blockquote>
<p>设定了 –offline 安装依然发生HTTP ERROR，为conda 版本bug</p>
</blockquote>
<h4 id="conda-pack-and-unpack-有效"><a href="#conda-pack-and-unpack-有效" class="headerlink" title="conda pack and unpack(有效)"></a>conda pack and unpack(有效)</h4><ul>
<li>本地计算机上，在base环境下（保证各个子环境都可以使用）<code>conda install  - c conda-forge conda-pack</code>或者<code>pip install conda-pack</code></li>
<li><code>conda activate my_env</code>，打包本地虚拟环境 <code>conda-pack</code> 得到my_env.tar.gz，讲my_env.tar.gz传输到远程服务器</li>
<li>在远程服务器上解压，<code>tar -xf my_env.tar.gz -C ~/anaconda3/envs/my_env</code>，激活虚拟环境 <code>source ~/anaconda3/envs/my_env/bin/activate</code></li>
</ul>
<blockquote>
<p>解压过程出现<code>tar my_env.tar.gz ~/anaconda3/envs/my_env</code> 出现<br>tar: xx: Not FOund in archive ; tar: Exiting with failure status due to previous errors 错误<br>原因是因为压缩文件使用的相对路径，在当前目录下找不到/usr目录，通过使用<code>-C</code>指定解压目录可解决此问题<br><code>tar -zxvf my_env.tar.gz -C ~/anaconda3/envs/my_env</code></p>
</blockquote>
]]></content>
      <categories>
        <category>anaconda</category>
      </categories>
      <tags>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>git 创建分支并上传文件</title>
    <url>/2022/01/02/git%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF%E5%B9%B6%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<pre><code>git clone http://github.com/qqq27/Project.git
git branch lq  # 创建一个名为lq的新分支
git checkout branch lq
cd folder
git add .
git commit -m &quot;  &quot;
git push origin lq
git branch -d lq ## 本地删除分支
git push origin :lq ## 删除远程分支```
</code></pre>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
